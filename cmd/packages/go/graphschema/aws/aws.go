// Copyright 2023 Specter Ops, Inc.
//
// Licensed under the Apache License, Version 2.0
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by Cuelang code gen. DO NOT EDIT!
// Cuelang source: github.com/specterops/bloodhound/-/tree/main/packages/cue/schemas/

package aws

import (
	"errors"
	graph "github.com/specterops/bloodhound/dawgs/graph"
)

var (
	AWSAccount = graph.StringKind("AWSAccount")
	AWSEntity = graph.StringKind("AWSBase")
	AWSTag = graph.StringKind("AWSTag")
	AWSAction = graph.StringKind("AWSAction")
	AWSActionBlob = graph.StringKind("AWSActionBlob")
	AWSResourceBlob = graph.StringKind("AWSResourceBlob")
	AWSConditionKey = graph.StringKind("AWSConditionKey")
	AWSConditionValue = graph.StringKind("AWSConditionValue")
	AWSConditionOperator = graph.StringKind("AWSConditionOperator")
	AWSCondition = graph.StringKind("AWSCondition")
	AWSStatement = graph.StringKind("AWSStatement")
	AWSPolicyDocument = graph.StringKind("AWSPolicyDocument")
	AWSPolicyVersion = graph.StringKind("AWSPolicyVersion")
	AWSManagedPolicy = graph.StringKind("AWSManagedPolicy")
	AWSInlinePolicy = graph.StringKind("AWSInlinePolicy")
	AWSAssumeRolePolicy = graph.StringKind("AWSAssumeRolePolicy")
	AWSRole = graph.StringKind("AWSRole")
	AWSUser = graph.StringKind("AWSUser")
	AWSGroup = graph.StringKind("AWSGroup")
	UniqueArn = graph.StringKind("UniqueArn")
	AWSResourceType = graph.StringKind("AWSResourceType")
	
	ActsOn = graph.StringKind("ActsOn")
	AllowAction = graph.StringKind("AllowAction")
	DenyAction = graph.StringKind("DenyAction")
	AttachedTo = graph.StringKind("AttachedTo")
	ExpandsTo = graph.StringKind("ExpandsTo")
	OnResource = graph.StringKind("OnResource")
	MemberOf = graph.StringKind("MemberOf")
	TypeOf = graph.StringKind("TypeOf")

)

type Property string

const (
	AttachmentCount			Property = "attachmentcount"
	CreateDate				Property = "createdate"
	DefaultVersionId		Property = "defaultversionid"
	IsAttachable			Property = "isattachable"
	Path 					Property = "path"
	PermissionsBoundaryUsageCount Property = "permissionsboundaryusagecount"
	PolicyId				Property = "policyid"
	PolicyName				Property = "policyname"
	RoleId					Property = "roleid"
	RoleName				Property = "rolename"
	UpdateDate				Property = "updatedate"
)

func AllProperties() []Property {
	return []Property{CreateDate, Path, RoleId, RoleName}
}
func ParseProperty(source string) (Property, error) {
	switch source {
	case "createdate":
		return CreateDate, nil
	case "path":
		return Path, nil
	case "roleid":
		return RoleId, nil
	case "rolename":
		return RoleName, nil
	default:
		return "", errors.New("Invalid enumeration value: " + source)
	}
}
func (s Property) String() string {
	switch s {
	case CreateDate:
		return string(CreateDate)
	case Path:
		return string(Path)
	case RoleId:
		return string(RoleId)
	case RoleName:
		return string(RoleName)
	default:
		panic("Invalid enumeration case: " + string(s))
	}
}
func (s Property) Name() string {
	switch s {
	case CreateDate:
		return "Create Date"
	case Path:
		return "Path"
	case RoleId:
		return "Role ID"
	case RoleName:
		return "Role Name"
	default:
		panic("Invalid enumeration case: " + string(s))
	}
}
func (s Property) Is(others ...graph.Kind) bool {
	for _, other := range others {
		if value, err := ParseProperty(other.String()); err == nil && value == s {
			return true
		}
	}
	return false
}
func Nodes() []graph.Kind {
	return []graph.Kind{AWSEntity, AWSUser, AWSRole, AWSManagedPolicy}
}
func Relationships() []graph.Kind {
	return []graph.Kind{AttachedTo, ExpandsTo, OnResource, MemberOf}
}

func PathfindingRelationships() []graph.Kind {
	return []graph.Kind{AttachedTo, ExpandsTo, OnResource, MemberOf}
}